{
  "description": "This Python script performs a comprehensive single-cell RNA-seq analysis using the `omicverse` and `scanpy` libraries. It covers data loading, preprocessing, quality control, dimensionality reduction, clustering, cell type annotation, and visualization. Here's a breakdown of its functionality and structure:\n\n**1. Setup and Data Loading:**\n\n*   **Libraries Import:** Imports necessary libraries: `omicverse` (as `ov`), and `scanpy` (as `sc`).\n*   **Version Check:** Prints the versions of `omicverse` and `scanpy` for reproducibility.\n*   **Plotting Defaults:** Sets plotting defaults for `omicverse`.\n*   **Data Loading:** Reads 10X Genomics data from a specified directory using `sc.read_10x_mtx`.  It uses gene symbols as variable names and enables caching for faster loading in subsequent runs.\n\n**2. Preprocessing and Quality Control:**\n\n*   **Quality Control (QC):** Filters cells based on mitochondrial gene percentage, number of UMIs, and number of detected genes using `ov.pp.qc`.\n*   **Preprocessing:** Normalizes and calculates highly variable genes using `ov.pp.preprocess`. It uses a shiftlog transform and pearson scaling by default.\n*   **Highly Variable Gene Selection:** Saves the original data in `adata.raw`, filters the `AnnData` object to retain only the highly variable genes.\n*   **Scaling:** Scales the expression data using `ov.pp.scale`.\n\n**3. Dimensionality Reduction and Clustering:**\n\n*   **Principal Component Analysis (PCA):** Performs PCA on the scaled data using `ov.pp.pca`, reducing the dimensionality to 50 principal components.\n*   **Neighborhood Graph Construction:** Constructs a neighborhood graph using `sc.pp.neighbors`. It uses scaled PCA representation for graph construction.\n*   **Leiden Clustering:** Performs Leiden clustering to identify cell populations using `sc.tl.leiden`.\n*   **Manifold Dimensionality Embedding (MDE):** Reduces the dimensionality of the PCA representation for visualization using `ov.utils.mde` and stores it in `adata.obsm[\"X_mde\"]`.\n\n**4. Cell Type Annotation:**\n\n*   **pySCSA Initialization (CellMarker):** Creates a `pySCSA` object configured to use the CellMarker database for cell type annotation. It sets parameters for fold change, p-value, target (CellMarker), tissue (all tissues), and database path.\n*   **Cell Annotation (CellMarker):** Annotates cells based on Leiden clusters using the CellMarker database. It uses ranked gene expression to perform the annotation.\n*   **Auto Annotation (CellMarker):** Automatically annotates the cells based on the CellMarker annotation results.\n*    **pySCSA Initialization (PanglaoDB):** Creates a `pySCSA` object configured to use the PanglaoDB database for cell type annotation. It sets parameters for fold change, p-value, target (PanglaoDB), tissue (all tissues), and database path.\n*   **Cell Annotation (PanglaoDB):** Annotates cells based on Leiden clusters using the PanglaoDB database. It uses ranked gene expression to perform the annotation.\n*   **Print Cell Annotations:** Prints the cell annotation summary using `scsa.cell_anno_print()`\n*   **Auto Annotation (PanglaoDB):** Automatically annotates the cells based on the PanglaoDB annotation results.\n\n**5. Visualization:**\n\n*   **Embedding Plot (Leiden/CellMarker/PanglaoDB):** Generates and displays an embedding plot colored by Leiden clusters, CellMarker annotations, and PanglaoDB annotations.\n*   **Group Creation:** Adds a \"group\" column to `adata.obs`, initially set to \"A\" for all cells, and sets the first 1000 cells to \"B\".\n*   **Embedding Plot (Group):** Generates an embedding plot colored by group membership.\n*   **Cell Proportion Plot:** Generates a cell proportion plot based on CellMarker annotations, comparing the proportions of different cell types between groups A and B.\n*   **Embedding Plot (Cell Type):** Generates a celltype embedding plot.\n*   **Ratio of Observed to Expected (Ro/e):** Calculates the ratio of observed to expected cell proportions using the provided 'group' and 'scsa_celltype_cellmarker'.\n*   **Ro/e Heatmap:** Transforms the Ro/e ratios based on thresholds (>=2 is '+++', >=1.5 is '++', >=1 is '+', otherwise '+/-'), and displays a heatmap with these symbolic annotations.\n\n**6. Marker Gene Analysis:**\n\n*   **Marker Gene Dictionary:** Creates a dictionary of marker genes for each cell type\n*   **Leiden Dendrogram:** Computes and stores a dendrogram based on leiden clustering.\n*   **Dot Plot:** Generates a dot plot of gene expression for a list of marker genes across Leiden clusters.\n*   **Cluster to Annotation Mapping:** Creates a dictionary manually mapping Leiden clusters to major cell type labels.\n*   **Annotation with Major Cell Types:** Uses a function to map from the dictionary and add the major cell type to adata.obs as a column.\n*   **Embedding Plot (Major and CellMarker):** Generates and displays an embedding plot colored by major cell types and CellMarker annotations.\n*   **Get Cell Type Markers:** Extracts marker genes for each cell type identified by CellMarker.\n*   **Print Marker Genes:** Prints the keys of the marker dictionary and the marker genes associated with the \"B cell\" type.\n*   **Get Tissue list:** Prints the available tissue list in the PySCSA database.\n\n**In Summary:**\n\nThis script provides a comprehensive workflow for analyzing single-cell RNA-seq data. It covers essential steps from data loading and quality control to visualization and cell type annotation using different annotation databases (cellmarker and panglaodb). It also goes a step further in analyzing the ratio of observed to expected cell proportion across different groups as well as using a dotplot to analyze marker gene expression. The script is well-commented, making it easier to understand and adapt for other datasets. It is using `omicverse` for a major part of the pipeline.",
  "file": "t_cellanno_annotated.py"
}