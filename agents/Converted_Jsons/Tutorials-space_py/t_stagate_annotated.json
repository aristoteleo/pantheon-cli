{
  "description": "This Python script performs spatial transcriptomics analysis, using the `omicverse`, `scanpy`, and `pandas` libraries. Here's a breakdown of its functionality and structure:\n\n**Overall Goal:**\n\nThe script aims to:\n\n1.  **Load and preprocess spatial transcriptomics data.** This includes loading Visium data, performing quality control, and selecting spatially variable genes.\n2.  **Integrate spatial information using GraphST.** This step utilizes GraphST to learn an embedding that incorporates spatial relationships between cells.\n3.  **Cluster data using GraphST embeddings.** It employs different clustering methods like mclust, louvain, and leiden after applying GraphST.\n4.  **Integrate spatial information using pySTAGATE.** This step utilizes pySTAGATE to learn another embedding incorporating spatial relationships between cells.\n5.  **Cluster data using pySTAGATE embeddings.** It employs different clustering methods like mclust, louvain, and leiden after applying STAGATE.\n6.  **Visualize the results.** The script generates spatial plots of raw gene expression, GraphST clustering, and pySTAGATE clustering, and also spatial plots of pseudospacial similarity.\n7.  **Evaluate the clustering performance.** It calculates the Adjusted Rand Index (ARI) to compare the clustering results against known ground truth labels.\n\n**Detailed Breakdown:**\n\n**1. Initialization & Data Loading:**\n\n*   **Imports:**\n    *   `omicverse` (aliased as `ov`): A library for multi-omics data analysis, focusing on spatial data.\n    *   `scanpy` (aliased as `sc`): A library for single-cell data analysis.\n    *   `pandas` (aliased as `pd`): A library for data manipulation and analysis.\n    *   `os`: A library for interacting with the operating system, used here to build file paths.\n    *   `matplotlib.pyplot` (aliased as `plt`): Library for plotting data.\n    *  `sklearn.metrics.cluster.adjusted_rand_score`: Used to calculate adjusted Rand index.\n*   **Plotting Setup:** `ov.plot_set()` sets default plotting parameters for `omicverse`.\n*   **Data Loading:**\n    *   `sc.read_visium()` loads Visium spatial data into an `AnnData` object named `adata`.\n    *   `adata.var_names_make_unique()` ensures gene names are unique.\n*   **Quality Control:**\n    *   `sc.pp.calculate_qc_metrics()` calculates quality control metrics for the data.\n    *   `adata = adata[:, adata.var['total_counts'] > 100]` filters genes by total counts, keeping only genes with total count above 100.\n*   **Spatial Variable Gene Selection:**\n    *   `ov.space.svg()` identifies spatially variable genes using the `prost` mode, setting the number of genes, a target sum, and specifying Visium as the platform.\n\n**2. Ground Truth Annotation:**\n\n*   **Load Ground Truth:**\n    *   `pd.read_csv()` reads ground truth annotation data from a tab-separated file.\n*   **Add Annotation:**\n    *   The `Ground Truth` column is added to the AnnData object's `obs` (observation metadata). The annotations are mapped to the `adata` observations using the observation names.\n*   **Spatial Plot:**\n    *   `sc.pl.spatial()` creates a spatial plot with annotations colored by `Ground Truth`.\n\n**3. GraphST Integration:**\n\n*   **GraphST Model Initialization:**\n    *   `ov.externel.GraphST.GraphST()` initializes a GraphST model, specifying the `AnnData` object and the device to use for training (GPU 'cuda:0').\n*   **GraphST Training:**\n    *   `model.train()` trains the GraphST model.\n*   **GraphST Clustering:**\n    *   `ov.utils.cluster()` is used to perform clustering using mclust with the GraphST embedding along with other representations, with different clustering algorithms like louvain and leiden as well. The resulting clustering labels are refined to incorporate neighborhood information.\n\n**4. Spatial Visualization with Cluster Labels:**\n\n*  **Spatial Plot:**\n    * `sc.pl.spatial()` produces spatial plots of refined mclust, leiden, louvain clustering results along with ground truth.\n\n**5. STAGATE Integration:**\n\n*   **Coordinate Extraction:**\n    *   Spatial coordinates from `adata.obsm['spatial']` are extracted and stored in the `adata.obs` DataFrame as 'X' and 'Y'.\n*   **STAGATE Model Initialization:**\n     *  `ov.space.pySTAGATE()` initializes a pySTAGATE model, specifying `AnnData` object, batch sizes, spatial coordinates, cutoff radius, epoch number, and other parameters.\n*   **STAGATE Training:**\n    *  `STA_obj.train()` trains the STAGATE model.\n*   **STAGATE Prediction:**\n    *   `STA_obj.predicted()` uses the trained STAGATE model to generate predictions.\n*   **STAGATE Clustering:**\n    *   `ov.utils.cluster()` is used to perform clustering using mclust with the STAGATE embedding, along with other representations, with different clustering algorithms like louvain and leiden as well. The resulting clustering labels are refined to incorporate neighborhood information.\n\n**6. Spatial Visualization with STAGATE Labels:**\n\n* **Spatial Plot:**\n   *  `sc.pl.spatial()` produces spatial plots of refined mclust, leiden, louvain clustering results from STAGATE embedding along with ground truth.\n\n**7. Gene Visualization:**\n\n*   **Gene of Interest Selection:**\n    *   The top 10 genes based on their PI value are displayed.\n    *   `plot_gene` is set to `MBP`.\n*   **Spatial Plots of Expression:**\n    *   `sc.pl.spatial()` generates two spatial plots for `MBP`: one for the raw gene expression and another for STAGATE-transformed expression (`STAGATE_ReX` layer).\n\n**8. Pseudospacial Similarity Analysis:**\n\n*   **Pseudospacial Similarity Computation:**\n    *   `STA_obj.cal_pSM()` computes the pseudospacial similarity matrix (pSM) using the trained STAGATE model.\n*   **Spatial Plot of pSM:**\n    *   `sc.pl.spatial()` generates a spatial plot that visualizes the `Ground Truth` and the computed `pSM_STAGATE`.\n\n**9. Performance Evaluation:**\n\n*   **Adjusted Rand Index Calculation:**\n    *   `adjusted_rand_score` from `sklearn.metrics` is used to calculate the ARI between the different clustering results and the `Ground Truth`.\n    *  The ARI values for the different GraphST and pySTAGATE clustering results are printed.\n\n**Structure:**\n\nThe script follows a typical workflow for spatial transcriptomics analysis:\n\n1.  **Data Loading and Preprocessing:** Handles raw data, filters, and transforms into a suitable format.\n2.  **Spatial Integration:** Applies GraphST and pySTAGATE models to leverage spatial context.\n3.  **Clustering:** Performs clustering on integrated data to identify cell groups.\n4.  **Visualization:** Generates spatial plots to explore the results.\n5.  **Evaluation:**  Quantifies clustering performance against known labels.\n\n**Key Concepts:**\n\n*   **AnnData:** A data structure for single-cell and spatial data analysis, used in `scanpy` and `omicverse`.\n*   **Spatial Variable Genes:** Genes whose expression pattern varies across spatial locations.\n*   **GraphST:** A deep learning method for learning spatial embeddings.\n*   **pySTAGATE:** Another deep learning method for learning spatial embeddings.\n*   **Clustering:** Grouping similar data points (cells in this case) based on their features.\n*   **Adjusted Rand Index (ARI):** A measure of the similarity between two clusterings, correcting for chance.\n\n**In Summary:**\n\nThis script is a comprehensive example of how to use `omicverse`, `scanpy`, and related libraries to analyze spatial transcriptomics data. It demonstrates: data loading, preprocessing, spatial feature selection, spatial integration with GraphST and pySTAGATE, clustering, visualization, and quantitative evaluation of clustering performance. It provides a solid framework for spatial transcriptomics analysis and serves as a good starting point for more complex analyses.",
  "file": "t_stagate_annotated.py"
}