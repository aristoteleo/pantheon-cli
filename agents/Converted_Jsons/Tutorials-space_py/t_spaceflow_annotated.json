{
  "description": "This Python script performs spatial transcriptomics analysis using the `omicverse` and `scanpy` libraries. Here's a breakdown of its functionality and structure:\n\n**Overall Functionality:**\n\nThe script aims to:\n\n1. **Load and Preprocess Spatial Transcriptomics Data:** Reads Visium data, performs basic quality control, and identifies spatially variable genes.\n2. **Integrate Ground Truth Annotations:** Loads a ground truth annotation file and adds it to the spatial transcriptomics data.\n3. **Perform Spatial Embedding with PySpaceFlow:** Uses a spatial deep learning model (`PySpaceFlow`) to generate a low-dimensional representation of the data while considering spatial relationships between cells.\n4. **Cluster Spatial Data:** Clusters the data based on the spatial embedding generated by PySpaceFlow using a Gaussian Mixture Model.\n5. **Visualize Results:** Generates spatial plots to visualize the ground truth annotations, the PySpaceFlow embedding, and the clustering results.\n\n**Detailed Structure and Functionality:**\n\n1. **Import Libraries:**\n   - `import omicverse as ov`: Imports the `omicverse` library, which provides specialized spatial analysis tools, and aliases it as `ov`.\n   - `import scanpy as sc`: Imports the `scanpy` library, which is a widely used tool for single-cell analysis, and aliases it as `sc`.\n   - `import pandas as pd`: Imports the `pandas` library, used for data manipulation and working with dataframes, and aliases it as `pd`.\n   - `import os`: Imports the `os` library, which provides functions for interacting with the operating system.\n\n2. **Setup:**\n   - `ov.utils.ov_plot_set()`: Sets some plotting parameters for the `omicverse` library to improve the visual output.\n\n3. **Load and Preprocess Spatial Data:**\n   - `adata = sc.read_visium(path='data', count_file='151676_filtered_feature_bc_matrix.h5')`: Reads the Visium spatial transcriptomics data from the specified H5 file into an `AnnData` object (a common data structure in `scanpy`) named `adata`.\n   - `adata.var_names_make_unique()`: Ensures that gene names in the `AnnData` object are unique, which is crucial for downstream analysis.\n   - `sc.pp.calculate_qc_metrics(adata, inplace=True)`: Calculates quality control (QC) metrics for each cell in the `AnnData` object and stores them in the `adata.obs` DataFrame (i.e., cell metadata).\n   - `adata = adata[:,adata.var['total_counts']>100]`: Filters out genes (variables in the AnnData object) that have a total count of 100 or less, keeping only genes that are expressed at a higher level across all cells.\n   - `adata=ov.space.svg(adata,mode='prost',n_svgs=3000,target_sum=1e4,platform=\"visium\",)`: Computes spatially variable genes (SVGs) using the `omicverse` implementation. It calculates the spatial variance of genes and identifies those that are most variable across the spatial locations. It uses the `prost` method to perform this calculation. The top 3000 SVGs are selected.\n   - `adata.raw = adata`: Creates a backup of the original count data by storing it in the `adata.raw` attribute. This is useful for some analysis steps.\n   - `adata = adata[:, adata.var.space_variable_features]`: Filters the `AnnData` object to keep only the genes identified as spatially variable in the previous step. This focuses the analysis on spatially relevant gene expression patterns.\n    - `adata`: This line simply outputs the AnnData object to the console, showing basic information about the object.\n\n4. **Integrate Ground Truth Annotations:**\n    - `Ann_df = pd.read_csv(os.path.join('data', '151676_truth.txt'), sep='\\t', header=None, index_col=0)`: Loads the ground truth annotation data from a tab-separated file into a pandas DataFrame, using the first column as the index.\n    - `Ann_df.columns = ['Ground Truth']`: Sets the column name of the annotation DataFrame to 'Ground Truth'.\n    - `adata.obs['Ground Truth'] = Ann_df.loc[adata.obs_names, 'Ground Truth']`: Adds the ground truth annotation from the DataFrame to the `adata.obs` DataFrame (cell metadata), matching cell names between `adata.obs_names` and `Ann_df` index.\n    - `sc.pl.spatial(adata, img_key=\"hires\", color=[\"Ground Truth\"])`: Generates a spatial plot where each cell is colored based on its 'Ground Truth' annotation. The `hires` option specifies that the high-resolution image data is used for the plot.\n\n5. **Spatial Embedding with PySpaceFlow:**\n   - `sf_obj=ov.space.pySpaceFlow(adata)`: Initializes a PySpaceFlow object, which is a spatial deep learning model from the `omicverse` library, using the spatial transcriptomics `AnnData` object as input.\n   - `sf_obj.train(...)`: Trains the PySpaceFlow model using various parameters. This step learns a low-dimensional representation of the spatial data, capturing spatial dependencies between cells.\n   - `sf_obj.cal_pSM(...)`: Calculates the pseudo-spatial mapping (pSM) using the trained model. This step transforms the data into a space where spatial similarity is better reflected, using a neighborhood graph and graph operations.\n\n6. **Visualize PySpaceFlow Results:**\n    -  `sc.pl.spatial(adata, color=['pSM_spaceflow','Ground Truth'],cmap='RdBu_r')`: Generates a spatial plot showing the 'pSM_spaceflow' (the PySpaceFlow embedding) and 'Ground Truth' annotations, using the 'RdBu_r' colormap.\n\n7. **Cluster Spatial Data:**\n    - `ov.utils.cluster(adata,use_rep='spaceflow',method='GMM',...)`: Clusters the cells based on their representation using the spaceflow embedding obtained in the previous step. It utilizes a Gaussian Mixture Model (`GMM`) clustering method.\n\n8. **Visualize Clustering Results:**\n    - `sc.pl.spatial(adata, color=['gmm_cluster',\"Ground Truth\"])`: Generates another spatial plot showing the 'gmm_cluster' assignments (clusters) and the ground truth annotations, allowing for a comparison between the automated clustering and the existing annotations.\n\n**Key Libraries and Concepts:**\n\n- **`omicverse`:**  A library specialized in spatial omics analysis. It provides functions for spatial variable gene detection and a spatial embedding model (PySpaceFlow).\n- **`scanpy`:** A popular Python library for single-cell RNA-seq data analysis, also widely used in spatial transcriptomics. It provides functions for data reading, pre-processing, plotting, and clustering.\n- **`AnnData`:** A fundamental data structure in `scanpy` that stores both expression data (gene expression counts) and cell-level metadata (cell annotations and quality control metrics).\n- **Visium:** A spatial transcriptomics technology that captures both gene expression and spatial information from tissues.\n- **Spatial Variable Genes (SVGs):** Genes whose expression varies significantly based on spatial locations in the tissue.\n- **PySpaceFlow:** A spatial deep learning model that can be used to learn a low-dimensional representation of the data while considering spatial relationships between cells.\n- **Pseudo-Spatial Mapping (pSM):** The output of PySpaceFlow's transformation which encodes cell's spatial context and location into a low dimensional representation, capturing neighborhood effects and spatial distributions.\n- **Gaussian Mixture Model (GMM):** A probabilistic clustering method that assumes that the data is generated from a mixture of Gaussian distributions.\n\n**In summary, this script is a comprehensive pipeline for analyzing spatial transcriptomics data. It performs preprocessing, spatial embedding with a deep learning model, clustering, and visualization to explore and understand the spatial patterns of gene expression and their correspondence with the ground truth annotations.**",
  "file": "t_spaceflow_annotated.py"
}