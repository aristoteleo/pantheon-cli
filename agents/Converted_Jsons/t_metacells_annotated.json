{
  "description": "This Python script performs a single-cell analysis workflow, primarily using the `omicverse` (ov), `scanpy` (sc), and `scvelo` (scv) libraries. It focuses on generating \"meta-cells\" using the MetaCell algorithm, evaluating their quality, and visualizing the results alongside the original cells. Here's a breakdown of the functionality and structure:\n\n**1. Initialization and Data Loading:**\n\n*   **Imports:** Imports necessary libraries: `omicverse` (as `ov` for single-cell analysis), `scanpy` (as `sc` for single-cell analysis), `scvelo` (as `scv` for RNA velocity analysis), `seaborn` (as `sns` for statistical visualizations), and `matplotlib.pyplot` (as `plt` for plotting).\n*   **Plot Settings:** Sets default plotting parameters using `ov.plot_set()`.\n*   **Data Loading:** Loads the pancreas dataset using `scv.datasets.pancreas()` and stores it in `adata`, an `AnnData` object. This dataset likely contains gene expression data for cells from the pancreas.\n*   **AnnData Display:** Shows the loaded `AnnData` object.\n\n**2. Quality Control and Preprocessing:**\n\n*   **Quality Control (QC):** Performs QC using `ov.pp.qc()`. This step filters cells based on:\n    *   Percentage of mitochondrial reads (`mito_perc`): removes cells with > 20% mitochondrial reads, indicating potential cell damage or stress.\n    *   Number of UMIs (`nUMIs`): removes cells with fewer than 500 UMIs (Unique Molecular Identifiers), indicating low sequencing depth.\n    *   Number of detected genes (`detected_genes`): removes cells with fewer than 250 detected genes.\n    *   Mitochondrial gene filtering (`mt_startswith='mt-'`): removes genes starting with 'mt-', likely mitochondrial genes.\n*   **Preprocessing:** Preprocesses the data using `ov.pp.preprocess()` with:\n    *   `mode='shiftlog|pearson'`: Applies shiftlog normalization and Pearson residual normalization.\n    *   `n_HVGs=2000`: Identifies and selects the top 2000 highly variable genes (HVGs). This reduces the dimensionality of the data and focuses on the most informative genes.\n*   **Storing Raw Data:** Stores the preprocessed `adata` as the `raw` attribute, which is good practice for later use with preprocessed data.\n*   **HVG Filtering:** Filters the `adata` to keep only the highly variable genes previously identified.\n\n**3. MetaCell Generation and Training:**\n\n*   **Data Scaling:** Scales the expression data in `adata.X` using `ov.pp.scale()`, which ensures all features have a similar range of values.\n*   **PCA:** Performs Principal Component Analysis (PCA) using `ov.pp.pca()`, reducing data dimensionality to 50 principal components (`n_pcs=50`). It uses the scaled data as input.\n*   **MetaCell Object Creation:** Creates a `MetaCell` object using `ov.single.MetaCell()`. It uses the scaled data, original data, and PCA components (`use_rep='scaled|original|X_pca'`), and tries to utilize a GPU for faster processing (`use_gpu='cuda:0'`). No specific number of metacells is specified initially (`n_metacells=None`).\n*   **MetaCell Initialization and Training:**\n    *   Initializes the archetypes for the MetaCell model using `meta_obj.initialize_archetypes()`.\n    *   Trains the MetaCell model using `meta_obj.train()` for a minimum of 10 and a maximum of 50 iterations.\n*   **Saving and Loading Model:** The trained MetaCell model is saved using `meta_obj.save()` and then reloaded using `meta_obj.load()`.\n\n**4. MetaCell Analysis and Evaluation:**\n\n*   **Prediction of Cell Assignments:** Predicts cell assignments using the trained MetaCell model with `meta_obj.predicted()`. This step uses:\n    *   `method='soft'`: Assigns soft memberships to cells across metacells.\n    *   `celltype_label='clusters'`: Uses cluster labels available in the AnnData object for cell type information.\n    *   `summarize_layer='lognorm'`: Summarizes log normalized data for calculating cell to metacell relationship.\n*   **Cell Type Purity Calculation:** Calculates the cell type purity of each metacell based on the provided cluster labels using `meta_obj.compute_celltype_purity()`.\n*   **Separation and Compactness Score Calculation:** Calculates separation and compactness scores for the metacells using `meta_obj.separation()` and `meta_obj.compactness()` respectively, based on scaled, original and pca representations.\n*   **Visualization of Evaluation Metrics:**\n    *   Creates a figure with three subplots using `plt.subplots()`.\n    *   Generates boxplots using `sns.boxplot()` to visualize:\n        *   SEACell purity scores.\n        *   MetaCell compactness scores.\n        *   MetaCell separation scores.\n    *   Applies customization to the plot, including removal of spines, tight layouts, and specific title.\n\n**5. Embedding and MetaCell Visualization:**\n\n*   **Embedding Plot:** Generates a UMAP (Uniform Manifold Approximation and Projection) embedding plot using `ov.pl.embedding()`. The plot is:\n    *   Colored by cluster labels (`color=['clusters']`).\n    *   Has a small frame and a title of \"Meta cells\".\n    *   Has customized legend font settings, marker size, transparency, and outline.\n*   **MetaCell Overlay:** Overlays the predicted metacells on the same plot using `ov.single.plot_metacells()` with a specific color.\n\n**6. Comparison of MetaCell and Original Cell Embeddings**\n\n* **Mean S Score Value:** Mean S score values are extracted from the meta cells using the function `ov.single.get_obs_value`, and stored to the output data object for further analysis. \n* **Original Data Preprocessing and Dimensionality Reduction:**\n    *   Reimports `scanpy` as `sc`.\n    *   Copy of the AnnData object to the raw attribute.\n    *   Highly Variable Gene calculation using Scanpy, using the top 2000 genes, and filtering data to only those genes.\n    *   Data Scaling, PCA (30 Principal Components) using `ov` functions.\n    *   Graph calculation using `ov.pp.neighbors`\n    *   UMAP dimensionality reduction using `ov.pp.umap()`\n*   **Cell Type Annotation and Visualization:**\n    *   Converts 'celltype' column in the AnnData object to a categorical type\n    *   Reorders categories in celltype to match clusters from `adata`.\n    *   Copies color palette from 'clusters' to 'celltype'\n    *   Creates an embedding plot using `ov.pl.embedding()`:\n        *   Colored by 'celltype' (categorical) and 'S_score' (numerical).\n        *   Specific parameters like frame, colormap, and spacing are added to control layout.\n\n**Summary of the Script's Functionality:**\n\nThe script implements a MetaCell analysis workflow:\n\n1.  **Loads single-cell RNA-seq data.**\n2.  **Performs quality control and preprocessing steps (normalization, feature selection).**\n3.  **Trains a MetaCell model to generate meta-cells from single cells.**\n4.  **Evaluates the quality of the resulting meta-cells.**\n5.  **Visualizes the meta-cells and the original cells in embedding space, incorporating annotation.**\n6.  **Compares the original cell embeddings with meta cell output data object, and displays gene expression scores.**\n\nThis script helps to identify and characterize meta-cells, which might help reduce noise, uncover underlying patterns, and improve the understanding of single-cell data, by grouping similar cells into meta cells. The script also evaluates the performance of this cell aggregation, and visualizes the embeddings of the cells, along with annotation and S-score of the meta cells.",
  "file": "t_metacells_annotated.py"
}