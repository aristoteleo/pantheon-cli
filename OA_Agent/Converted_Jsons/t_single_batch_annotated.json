{
  "description": "This Python script performs a comprehensive single-cell RNA-seq analysis, including data loading, preprocessing, batch correction, dimensionality reduction, and evaluation using the `omicverse`, `scanpy`, and `scib_metrics` libraries.  Here's a breakdown of its functionality and structure:\n\n**Overall Workflow:**\n\n1. **Data Loading and Preparation:**\n   - Loads three AnnData objects from H5AD files (`neurips2021_s1d3.h5ad`, `neurips2021_s2d1.h5ad`, `neurips2021_s3d7.h5ad`).\n   - Adds a 'batch' column to each AnnData object indicating the source of the data.\n   - Concatenates the three AnnData objects into a single `adata` object.\n   - Casts the expression matrix to integer type.\n\n2. **Quality Control (QC):**\n   - Performs QC filtering based on thresholds for mitochondrial percentage, number of UMIs, and number of detected genes, taking batch effects into account.\n\n3. **Preprocessing:**\n   - Preprocesses the data using a shift-log transformation and selects highly variable genes (HVGs).\n\n4. **Data Storage and Subset:**\n   - Stores the original data in the `.raw` attribute of the AnnData object.\n   - Subsets the AnnData object to only include the selected HVGs.\n\n5. **Data Scaling and PCA:**\n   - Scales the expression matrix.\n   - Performs Principal Component Analysis (PCA) on the scaled data.\n\n6. **Dimensionality Reduction (MDE):**\n   - Applies Manifold Dimension Embedding (MDE) to the PCA results.\n\n7. **Batch Correction:**\n   - Applies several batch correction methods:\n     - **Harmony:** Integrates the datasets by aligning shared cell populations.\n     - **ComBat:** Corrects for batch effects using a parametric Bayesian method.\n     - **Scanorama:** Integrates the data through a matching-based approach.\n     - **scVI:** Employs a variational autoencoder approach to integrate the data.\n   - After each batch correction, it applies MDE to the corrected data and visualizes the embedding.\n\n8. **Topic Modeling (LDA):**\n    - Initializes an LDA topic model using the expression data and considering batch effects.\n    - Plots topic contributions and predicts topics for each cell.\n    - Applies MDE to the topic composition and UMAP feature embeddings\n\n9.  **Data Saving**\n   - Saves the processed data to two separate H5AD files to disk\n   -  Reads one of the files to continue analysis\n\n10. **Batch Correction Evaluation:**\n    - Initializes a Benchmarker object to evaluate different batch correction methods using `scib_metrics`.\n    - Runs the benchmark and generates a results table.\n\n**Line-by-Line Explanation:**\n\n- **Lines 1-2:** Imports necessary libraries, `omicverse` as `ov` and `scanpy` as `sc`. `omicverse` seems to be built on top of `scanpy`.\n- **Line 5:** Sets the plotting style for `omicverse`.\n- **Lines 7-12:** Reads three AnnData files and adds a batch annotation to each one, indicating its origin.\n- **Line 14:** Concatenates the three AnnData objects into a single AnnData object. The `merge='same'` argument indicates that the same variables (genes) should be merged.\n- **Line 15:** Prints the concatenated AnnData object.\n- **Line 17:** Prints the unique batch values present in the `obs` data of the concatenated AnnData object.\n- **Line 19:** Imports the `numpy` library for numerical operations.\n- **Line 20:** Casts the values in the `.X` attribute (data matrix) to a 64-bit integer type. This is a common practice before applying certain analysis methods.\n- **Line 22:** Performs quality control filtering using the `ov.pp.qc` function with specified parameters to remove low-quality cells and genes.\n- **Line 24:** Prints the quality-controlled AnnData object.\n- **Line 26:** Preprocesses the data using `ov.pp.preprocess`. This function performs a shift-log transformation and selects the top 3000 highly variable genes (HVGs) using the 'pearson' method. `batch_key=None` indicates that batch effects are not considered during HVG selection at this stage.\n- **Line 28:** Prints the preprocessed AnnData object.\n- **Line 30:** Copies the processed AnnData to `adata.raw`.  This is often done before further manipulations, so the original normalized data is retained.\n- **Line 31:** Subsets the AnnData object to only include the highly variable genes selected in the previous step by accessing the `highly_variable_features` annotation from the `.var` (variables) attribute.\n- **Line 32:** Prints the subset AnnData object.\n- **Line 34:** Saves the current AnnData object to an H5AD file using gzip compression.\n- **Line 36:** Scales the expression data in the AnnData object using `ov.pp.scale`.\n- **Line 37:** Performs PCA on the scaled expression data. `mask_var='highly_variable_features'` specifies that the PCA should only be done on the highly variable genes.\n- **Line 39:** Calculates an MDE embedding of the PCA results.  MDE is a non-linear dimensionality reduction technique.\n- **Line 41:** Generates a scatter plot embedding of the MDE-transformed PCA data, coloring points by 'batch' and 'cell_type', without displaying the plot, so it is saved.\n- **Lines 43-44, 46-48, 50-51, 53-55, 57-58, 60-62, 64-65, 67-69:**  These are similar sets of lines, performing batch correction using different methods (Harmony, ComBat, Scanorama, scVI), applying MDE, and visualizing the results. The batch corrected results are stored as `.obsm` embeddings.\n- **Lines 71-73, 75:** Sets up, executes, and plots the results of the LDA topic model.\n- **Line 77-78:**  Calculates MDE embeddings for the LDA topic compositions and UMAP features and stores the results in `.obsm`.\n- **Lines 80-83:**  Creates embedding plots of MDE-transformed topic and feature embeddings color coded by batch and cell type.\n- **Line 85:** Saves the final AnnData object containing the results of all batch correction methods to an H5AD file.\n- **Line 87:** Reads the saved AnnData object from file.\n- **Lines 89-91:** Copies the PCA, topic composition and UMAP feature embeddings to new `.obsm` keys for ease of access.\n- **Lines 93-94:** Imports and initializes the `Benchmarker` object from the `scib_metrics` library.  This object is used for evaluating and comparing the different batch correction methods. It will measure the integration and conservation of the data after the application of each method based on the given parameters.\n- **Line 99:** Runs the benchmark, which computes metrics to assess the quality of each batch correction method.\n- **Line 101:**  Generates and displays a table summarizing the benchmark results without min max scaling.\n\n**Key Concepts:**\n\n* **AnnData:**  A data structure used in `scanpy` to store single-cell gene expression data along with annotations.\n* **Batch Effects:**  Systematic biases in data that arise from technical differences between experiments or batches.\n* **Highly Variable Genes (HVGs):** Genes that show the most variation across cells. These genes are often used to reduce the dimensionality of the data.\n* **PCA (Principal Component Analysis):** A dimensionality reduction technique that finds the principal axes of variation in the data.\n* **MDE (Manifold Dimension Embedding):** A non-linear dimensionality reduction method.\n* **Batch Correction:** Techniques that are used to remove batch effects from the data.\n* **LDA (Latent Dirichlet Allocation):** A topic modeling algorithm that can be used to identify patterns in gene expression data.\n* **scib_metrics:**  A library providing metrics to evaluate the quality of batch correction methods.\n\n**In summary, this script is a complete workflow for analyzing single-cell RNA-seq data by merging multiple datasets, performing quality control, batch correction, dimensionality reduction, and evaluation. It provides a comprehensive example of how to leverage the capabilities of `omicverse`, `scanpy` and `scib_metrics` for single-cell data analysis.**",
  "file": "t_single_batch_annotated.py"
}