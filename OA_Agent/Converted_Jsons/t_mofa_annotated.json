{
  "description": "This Python script uses the `omicverse` library along with `scanpy` to perform multi-omics factor analysis and visualization.  It specifically focuses on using Multi-Omics Factor Analysis (MOFA) to integrate RNA-seq and ATAC-seq data, followed by visualization and analysis of the resulting factors in the context of cell types. Here's a breakdown of the functionality and structure:\n\n**Overall Structure:**\n\nThe script can be broadly divided into three main sections:\n\n1.  **Data Loading and MOFA Model Training:** (Lines 1-11) This part focuses on importing data, preprocessing, and running MOFA.\n2.  **Factor Loading and Analysis:** (Lines 13-27) Here, pre-trained MOFA model is loaded, and factors are extracted and incorporated with an existing RNA-seq dataset.\n3.  **Visualization and Interpretation:** (Lines 28-59) This section involves generating various plots to understand the results of MOFA, including factor distributions, factor correlations, gene weights, and UMAP embedding.\n\n**Detailed Functionality:**\n\n1.  **Import Libraries:**\n    *   `import omicverse as ov`: Imports the `omicverse` library, a package for multi-omics data analysis. It's aliased as `ov` for convenience.\n    *  `import scanpy as sc`: Imports the `scanpy` library, used for single-cell data analysis, especially for UMAP dimensionality reduction\n\n2.  **Load Multi-omics Data (Lines 2-3):**\n    *   `rna = ov.utils.read('data/sample/rna_p_n_raw.h5ad')`:  Loads an RNA-seq dataset from the file 'data/sample/rna_p_n_raw.h5ad' into a variable named `rna`. The '.h5ad' extension indicates this is likely an `AnnData` object, a common data format in single-cell genomics.\n    *   `atac = ov.utils.read('data/sample/atac_p_n_raw.h5ad')`: Similarly, loads an ATAC-seq dataset from 'data/sample/atac_p_n_raw.h5ad' into the `atac` variable. Both datasets are assumed to contain the same cells with both RNA and ATAC measurements for each cell.\n\n3.  **Prepare Data for MOFA (Lines 7-8):**\n    *   `test_mofa = ov.single.pyMOFA(omics=[rna, atac], omics_name=['RNA', 'ATAC'])`: Creates a `pyMOFA` object from `omicverse` using the loaded RNA and ATAC datasets. It assigns names 'RNA' and 'ATAC' to the respective omics layers.\n\n4.  **Run MOFA (Lines 10-11):**\n    *   `test_mofa.mofa_preprocess()`: Performs pre-processing of the data in preparation for the MOFA algorithm.\n    *   `test_mofa.mofa_run(outfile='models/brac_rna_atac.hdf5')`: Runs the MOFA algorithm. The result, the fitted model, is saved to 'models/brac_rna_atac.hdf5'.\n\n5.  **Load Pre-trained MOFA Model (Lines 16,18):**\n    *   `rna=ov.utils.read('data/sample/rna_test.h5ad')`: Loads a different RNA-seq dataset for analysis (likely a processed version compared to Line 2).\n    *   `rna=ov.single.factor_exact(rna,hdf5_path='data/sample/MOFA_POS.hdf5')`: Loads a pre-trained MOFA model from 'data/sample/MOFA_POS.hdf5'. Crucially, this function applies the MOFA model to the loaded RNA-seq dataset `rna` in order to retrieve factor loading values for each cell in the `rna` object. These factor values are added to the `rna` object.\n\n6.  **Factor Correlation (Line 21):**\n    *   `ov.single.factor_correlation(adata=rna, cluster='cell_type', factor_list=[1, 2, 3, 4, 5])`: Calculates and visualizes the correlation between the MOFA factors (1 to 5) and the cell types defined in the `rna` object using its \"cell_type\" metadata.\n\n7.  **Extract Weights for a Specific Factor (Line 23):**\n    *  `ov.single.get_weights(hdf5_path='data/sample/MOFA_POS.hdf5',view='RNA',factor=1)`: Extracts and prints the weights of genes for the first factor from the RNA-seq data from a pre-trained MOFA model in `data/sample/MOFA_POS.hdf5`.\n\n8.  **Analysis with `pyMOFAART` Object (Lines 25-37):**\n    *   `pymofa_obj = ov.single.pyMOFAART(model_path='data/sample/MOFA_POS.hdf5')`: Creates a `pyMOFAART` object to interact with a pre-trained MOFA model.\n    *   `pymofa_obj.get_factors(rna)`: Extracts the MOFA factor values for each cell in the RNA-seq dataset and adds them as a layer to the `rna` object.\n    *   `pymofa_obj.plot_r2()`: Plots the R-squared values, showing the amount of variance explained by each factor in the MOFA model.\n    *   `pymofa_obj.get_r2()`: Retrieves R-squared data.\n    *   `pymofa_obj.plot_cor(rna, 'cell_type')`:  Generates a correlation plot between the factors and cell types.\n    *   `pymofa_obj.plot_factor(rna, 'cell_type', 'Epi', figsize=(3, 3), factor1=6, factor2=10)`:  Visualizes the distribution of two specific factors (6 and 10) within a specific cell type (\"Epi\")\n\n9. **UMAP Visualization with Scanpy (Lines 39-51):**\n   *    `sc.pp.neighbors(rna)`: Compute nearest neighbors for cells.\n   *    `sc.tl.umap(rna)`: Calculate UMAP embedding.\n   *   `sc.pl.embedding(rna, basis=\"X_umap\", color=[\"factor6\", \"cell_type\"], frameon=False, ncols=2, show=False, cmap='Greens', vmin=0)`: Creates a UMAP embedding plot, coloring cells by the value of factor 6 and also by cell type using green color map.\n\n10. **Weight and Feature Visualization (Lines 54-59):**\n   *  `pymofa_obj.plot_weight_gene_d1(view='RNA',factor1=6,factor2=10,)`: Visualizes weight distribution of genes for the given factor using density distribution plots\n   *   `pymofa_obj.plot_weights(view='RNA', factor=6, color='#5de25d', ascending=True)`:  Displays the weights (contributions) of the genes for factor 6.\n    *   `pymofa_obj.plot_top_feature_heatmap(view='RNA')`:  Generates a heatmap of top-weighted genes for each factor in the RNA-seq data.\n\n**Key Concepts:**\n\n*   **Multi-Omics Factor Analysis (MOFA):** A statistical method that aims to identify underlying factors that drive variation across multiple omics datasets. This is valuable for identifying shared biology between different layers of data like RNA expression and chromatin accessibility.\n*   **AnnData:** A data format from Scanpy, commonly used to store and organize single-cell data.\n*   **Factor Loading:** A measure of how much a specific factor is associated with a given observation (cell).\n*   **Factor Weight:** Measures the contribution of genes to a given factor.\n*   **UMAP:** A dimensionality reduction technique used to visualize high-dimensional data in a low-dimensional space.\n\n**In Summary:**\n\nThis script is designed to:\n\n1.  Integrate RNA-seq and ATAC-seq data using MOFA.\n2.  Analyze the learned factors in relation to cell types and gene contributions.\n3.  Visualize the results using plots like factor distributions, correlations, UMAP, weight distributions, and gene heatmaps.\n\nThe script effectively uses the `omicverse` library to handle the complexity of multi-omics integration and analysis, and leverages `scanpy` for visualization. The final plots and analysis help identify the underlying biological processes captured by the MOFA factors.",
  "file": "t_mofa_annotated.py"
}