{
  "description": "This Python script performs a Weighted Gene Co-expression Network Analysis (WGCNA) on gene expression data using the `omicverse` package, after some initial preprocessing with `pandas` and `statsmodels`. Let's break down the functionality and structure line by line:\n\n**1. Setup and Data Loading (Lines 1-9)**\n\n   - **Imports:** The script begins by importing necessary libraries:\n      - `scanpy`: For single-cell data analysis (though not directly used in this specific script, it is likely intended for use with `omicverse` in other contexts).\n      - `omicverse`: The core library for omics data analysis, providing the `pyWGCNA` object and other functionalities.\n      - `matplotlib.pyplot`: For general plotting.\n      - `pandas`: For data manipulation using DataFrames.\n      - `statsmodels.robust`: For robust statistical methods, specifically Median Absolute Deviation (MAD).\n   - **Plotting Style:** `ov.plot_set()` sets a specific plotting style provided by `omicverse`.\n   - **Data Loading:**\n     - `ov.utils.read('data/5xFAD_paper/expressionList.csv', index_col=0)`: Reads a CSV file containing gene expression data into a pandas DataFrame. The first column is set as the index (likely containing gene names).\n     - `data.head()`: Displays the first few rows of the loaded DataFrame for a quick preview.\n\n**2. Gene Preprocessing and Filtering (Lines 11-15)**\n\n   - **MAD Calculation:** `gene_mad=data.apply(robust.mad)`: Calculates the Median Absolute Deviation (MAD) for each gene across all samples. This is a robust measure of variability less sensitive to outliers than standard deviation.\n   - **DataFrame Transposition:** `data=data.T`: Transposes the DataFrame so that genes become columns and samples are rows. This is a required input format for WGCNA.\n   - **Gene Filtering:**\n     - `data=data.loc[gene_mad.sort_values(ascending=False).index[:2000]]`: Selects the top 2000 genes with the highest MAD values. This filters the data to focus on the most variable genes, which are likely to be biologically informative.\n   - **Preview of Processed Data:** `data.head()`: Displays the first few rows of the filtered DataFrame.\n\n**3. WGCNA Initialization and Processing (Lines 17-38)**\n\n   - **`pyWGCNA` Object Initialization:**\n      - `pyWGCNA_5xFAD = ov.bulk.pyWGCNA(...)`: Creates an instance of the `pyWGCNA` class, providing key information such as:\n          - `name`: \"5xFAD_2k\" (a name for the analysis).\n          - `species`: \"mus musculus\" (mouse).\n          - `geneExp`: The transposed, filtered expression data.\n          - `outputPath`: The output path is set to ''.  This means results will be saved in current working directory, with no separate folder being created.\n          - `save`: True indicating that intermediate files should be saved.\n   - **Preview of Expression Data:** `pyWGCNA_5xFAD.geneExpr.to_df().head(5)`: Displays the first five rows of the gene expression data within the `pyWGCNA` object.\n   - **WGCNA Preprocessing:** `pyWGCNA_5xFAD.preprocess()`: Performs essential preprocessing steps internally within the WGCNA pipeline.\n   - **Soft Threshold Calculation:** `pyWGCNA_5xFAD.calculate_soft_threshold()`: Determines an appropriate soft-thresholding power for the adjacency matrix.\n   - **Adjacency Matrix Calculation:** `pyWGCNA_5xFAD.calculating_adjacency_matrix()`: Creates the adjacency matrix based on the expression data and the calculated soft threshold.\n   - **TOM Similarity Matrix Calculation:** `pyWGCNA_5xFAD.calculating_TOM_similarity_matrix()`: Calculates the Topological Overlap Matrix (TOM), a more robust measure of network connectivity.\n   - **Gene Tree Calculation:** `pyWGCNA_5xFAD.calculate_geneTree()`: Creates a hierarchical clustering dendrogram based on the TOM similarity.\n   - **Dynamic Module Detection:**\n     - `pyWGCNA_5xFAD.calculate_dynamicMods(...)`: Detects modules (groups of co-expressed genes) using the cutreeHybrid method with specific settings.\n          - `deepSplit`: Controls how sensitive the clustering method is to splitting groups.\n          - `pamRespectsDendro`: Determines if the Partitioning Around Medoids (PAM) algorithm should respect the dendrogram.\n   - **Module Eigengene Calculation:**\n      - `pyWGCNA_5xFAD.calculate_gene_module(...)`: Calculates module eigengenes, which represent the overall expression profile of each module. The 'softPower' parameter is passed as 8.\n   - **Network Matrix Plot:** `pyWGCNA_5xFAD.plot_matrix(save=False)`: Generates a visualization of the network connections but does not save the plot to file.\n   - **WGCNA Results Saving:** `pyWGCNA_5xFAD.saveWGCNA()`: Saves all the WGCNA results to files.\n\n**4. Loading and Examining Results (Lines 40-54)**\n\n   - **Loading Saved WGCNA Object:** `pyWGCNA_5xFAD=ov.bulk.readWGCNA('5xFAD_2k.p')`: Loads a previously saved `pyWGCNA` object, allowing for continued analysis without re-running the computationally expensive steps.\n   - **Module Information:** `pyWGCNA_5xFAD.mol.head()`: Displays the module assignment information for each gene.\n   - **Variable Information:** `pyWGCNA_5xFAD.datExpr.var.head()`: Displays variable information (genes in this case) stored in the expression data object.\n   - **Sub-Module Selection:**\n     - `sub_mol=pyWGCNA_5xFAD.get_sub_module(...)`: Extracts genes belonging to specific modules (in this case, 'gold' and 'lightgreen').\n     - `sub_mol.head(), sub_mol.shape`: Displays the first few rows of the sub-module information and its shape.\n   - **Sub-Network Selection:**\n      - `G_sub=pyWGCNA_5xFAD.get_sub_network(...)`: Extracts a sub-network of interactions within the 'lightgreen' module based on a correlation threshold of 0.2.\n      - `G_sub`: Prints out the structure of the graph sub-network.\n   - **Edge Counting:** `len(G_sub.edges())`:  Determines the number of edges within the sub-network.\n\n**5. Network Visualization and Metadata Integration (Lines 56-71)**\n\n   - **Sub-Network Plot:**\n     - `pyWGCNA_5xFAD.plot_sub_network(...)`: Generates a visual representation of the sub-network with specified parameters:\n          - `pos_type='kamada_kawai'`: Layout algorithm for network visualization.\n          - `pos_scale`: Scaling factor for the layout.\n          - `pos_dim`: Dimensionality of the layout (2D here).\n          - `figsize`: Size of the plot.\n          - `node_size`, `label_fontsize`: Control node size and font size for labels.\n          - `label_bbox`: Adjusts the bounding box around labels.\n          - `correlation_threshold`=0.2: Only display edges with correlation above 0.2.\n   - **Metadata Integration:**\n      - `pyWGCNA_5xFAD.updateSampleInfo(...)`: Loads sample metadata from the specified CSV file, updating the `pyWGCNA` object.\n      - `pyWGCNA_5xFAD.setMetadataColor(...)`: Sets specific colors for categorical metadata columns (Sex, Genotype, Age, and Tissue). This color mapping is used for visualization later.\n\n**6. WGCNA Analysis and Output (Lines 73-81)**\n\n   - **Full WGCNA Analysis:** `pyWGCNA_5xFAD.analyseWGCNA()`: Performs a suite of WGCNA analysis tasks internally within the `omicverse` library, such as differential expression analysis related to the sample metadata.\n   - **Metadata Extraction:** `metadata = pyWGCNA_5xFAD.datExpr.obs.columns.tolist()`: Retrieves a list of the metadata columns that can be used for plotting.\n   - **Module Eigengene Plot:** `pyWGCNA_5xFAD.plotModuleEigenGene('lightgreen', metadata, show=True)`: Visualizes the expression of the 'lightgreen' module eigengene across samples, colored by metadata information, and displays the plot.\n   - **Module Eigengene Barplot:** `pyWGCNA_5xFAD.barplotModuleEigenGene('lightgreen', metadata, show=True)`: Presents a barplot representation of the module eigengene expression across samples with metadata colored bars, and displays the plot.\n   - **Hub Gene Identification:** `pyWGCNA_5xFAD.top_n_hub_genes(moduleName=\"lightgreen\", n=10)`: Identifies and displays the top 10 hub genes (genes with highest connectivity) within the 'lightgreen' module.\n\n**Summary:**\n\nThis script performs a complete WGCNA analysis workflow using the `omicverse` package. It loads gene expression data, preprocesses it (filtering by MAD), constructs a gene co-expression network, identifies modules of co-expressed genes, visualizes subnetworks, integrates metadata, and provides tools for exploring module eigengene expression, and hub genes. This workflow is common in systems biology to understand relationships between genes and phenotypes by identifying groups of genes that behave similarly across samples.",
  "file": "t_wgcna_annotated.py"
}