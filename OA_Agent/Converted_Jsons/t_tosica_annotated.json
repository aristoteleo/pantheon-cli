{
  "description": "This Python script performs a single-cell data analysis workflow, primarily using the `omicverse` (likely for cell state prediction) and `scanpy` libraries. It loads reference and query datasets, trains a cell state prediction model, and applies it to the query dataset before performing downstream analyses. Let's break down the functionality step by step:\n\n**Data Loading and Preprocessing (Lines 1-17):**\n\n1.  **Import Libraries:** Imports `omicverse` (as `ov`) and `scanpy` (as `sc`) for single-cell data handling and analysis.\n2.  **Set Plotting Style:** Sets a specific plotting style for `omicverse`.\n3.  **Load Reference Data:** Reads a reference dataset from `demo_train.h5ad` (an AnnData object) using `scanpy`.\n4.  **Subset Reference Data (Var):** Ensures that all gene data in `ref_adata` is retained by explicitly indexing with its own `var_names`.\n5.  **Print Reference Data:** Prints the contents of the `ref_adata` AnnData object.\n6.  **Print Cell Type Counts (Reference):** Prints the number of cells belonging to each cell type in the reference data.\n7.  **Load Query Data:** Reads a query dataset from `demo_test.h5ad` (an AnnData object) using `scanpy`.\n8.  **Subset Query Data (Var):** Subsets `query_adata` to only contain genes that are also present in `ref_adata`. This ensures feature consistency between the two datasets.\n9.  **Print Query Data:** Prints the contents of the `query_adata` AnnData object.\n10. **Print Cell Type Counts (Query):** Prints the number of cells belonging to each cell type in the query data.\n11. **Make Variable Names Unique (Reference & Query):** Ensures that gene names in `ref_adata` and `query_adata` are unique.\n12. **Find Common Genes:** Finds the intersection of genes present in both `query_adata` and `ref_adata` and stores it in `ret_gene`.\n13. **Subset Data by Common Genes:** Subsets `query_adata` and `ref_adata` to only contain the genes present in `ret_gene`. This ensures both datasets have the same gene set for downstream analysis.\n\n**TOSICA Model Training and Prediction (Lines 18-28):**\n\n14. **Print Data Max Value:** Prints the maximum values in the expression matrices of `ref_adata` and `query_adata`.\n15. **Download Gene Set:** Downloads the TOSICA gene set file for pathway analysis.\n16. **Initialize TOSICA Object:** Initializes a `pyTOSICA` object using the preprocessed `ref_adata`.\n    *   Specifies gene set path (`genesets/GO_bp.gmt`).\n    *   Sets the depth parameter for pathway analysis.\n    *   Defines the label name ('Celltype') for training the model.\n    *   Specifies the project path.\n    *   Sets a batch size.\n17. **Train TOSICA Model:** Trains the TOSICA model for 5 epochs.\n18. **Save TOSICA Model:** Saves the trained model.\n19. **Load TOSICA Model:** Loads the saved model.\n20. **Predict Cell States:** Predicts cell states for the `query_adata` using the trained TOSICA model and stores the results in a new AnnData object called `new_adata`.\n\n**Query Data Post-processing and Embedding (Lines 29-37):**\n\n21. **Scale Query Data:** Scales the gene expression values of the query data using a method from `omicverse`.\n22. **Perform PCA:** Performs Principal Component Analysis (PCA) on the scaled data of `query_adata`, keeping 50 principal components.\n23. **Compute Neighborhood Graph:** Calculates the nearest neighbor graph based on the scaled PCA data.\n24. **Compute Multidimensional Embedding (MDE):** Computes a multidimensional embedding (MDE) on the scaled PCA data and adds it to the `query_adata.obsm` as \"X_mde\".\n25. **Print Query Data:** Prints the modified `query_adata`.\n26. **Copy Embeddings:** Copies the `obsm` (embedding matrices) and `obsp` (sparse distance matrices) from the relevant observations in `query_adata` to `new_adata` based on matching indices in the obs slot. This links the prediction results to the dimensional reduction and neighbor graphs\n27. **Print New Data:** Prints the modified `new_adata` which now contains the embedding, neighbors, and prediction.\n\n**Visualization and Downstream Analysis (Lines 38-75):**\n\n28. **Import Numpy:** Imports the `numpy` library as `np`.\n29. **Define Color Array:** Creates a NumPy array of hex color codes to be used for plotting.\n30. **Define Cell Types Tuple:** Creates a tuple of cell type names in a desired order.\n31. **Convert Prediction to Categorical:** Converts the 'Prediction' column in `new_adata.obs` to a categorical type.\n32. **Reorder Prediction Categories:** Reorders the categories of 'Prediction' in `new_adata` based on the defined cell type tuple.\n33. **Set Prediction Colors:** Assigns a color palette to the 'Prediction' annotation in `new_adata.uns` using color codes from the `col` array.\n34. **Update Cell Types Tuple:** Creates a tuple of cell types including \"MHC class II\" in a desired order.\n35. **Convert Celltype to Categorical:** Converts the 'Celltype' column in `new_adata.obs` to a categorical type.\n36. **Reorder Celltype Categories:** Reorders the categories of 'Celltype' in `new_adata` based on the updated cell type tuple.\n37. **Set Celltype Colors:** Assigns a color palette to the 'Celltype' annotation in `new_adata.uns`.\n38. **Create Embedding Plot 1:** Generates an embedding plot of the \"X_mde\" visualization, colored by both 'Celltype' and 'Prediction' annotations using `scanpy.pl.embedding`.\n39. **Identify Rare Cell Types:** Identifies cell types in the 'Prediction' column that have fewer than 5 cells.\n40. **Remove Rare Cell Types:** Removes cells from `new_adata` that have a 'Prediction' that is in the list of rare cell types from previous step.\n41. **Perform Differential Gene Expression Analysis:** Performs differential gene expression analysis using the Wilcoxon rank-sum test for each predicted cell type in `new_adata`.\n42. **Create Dotplot:** Creates a dotplot to visualize the top ranked genes identified in the differential expression analysis for each predicted cell type.\n43. **Get DEGs for PP Group:** Gets the differentially expressed genes for the 'PP' group (specific cell type) from the results of `rank_genes_groups` that pass a p-value cutoff.\n44. **Print DEGs:** Prints the first 5 rows of the DEG dataframe.\n45. **Create Embedding Plot 2:** Generates an embedding plot of the \"X_mde\" visualization, colored by 'Prediction' and 'GOBP_REGULATION_OF_MUSCLE_SYSTEM_PROCESS' gene set score using `scanpy.pl.embedding`.\n\n**Summary:**\n\nIn summary, the script takes single-cell gene expression data, uses a trained model to predict cell states, performs some downstream analysis, and finally generates some visualizations. The steps of data loading, subsetting, dimensionality reduction, embedding, and cell type predictions can be commonly observed in single-cell analysis pipelines. The usage of TOSICA and GO gene sets suggests a specific focus on cell state analysis and functional pathway enrichment. The script showcases both `omicverse` and `scanpy` functionalities for analyzing and visualizing single-cell data.",
  "file": "t_tosica_annotated.py"
}