{
  "description": "This Python script performs a bulk RNA-seq deconvolution analysis using single-cell RNA-seq data as a reference. It leverages several libraries for omics data analysis and visualization, including `scanpy`, `omicverse`, `matplotlib`, `anndata`, and `scvelo`. Here's a breakdown of its functionality and structure:\n\n**1. Library Imports:**\n\n*   **`import scanpy as sc`**: Imports the `scanpy` library, a popular tool for single-cell RNA-seq analysis. (Redundant import on line 66)\n*   **`import omicverse as ov`**: Imports `omicverse`, a library that provides high-level functions for various omics analyses, including bulk-to-single cell deconvolution.\n*   **`import matplotlib.pyplot as plt`**: Imports the `matplotlib` library for creating static visualizations.\n*   **`import anndata`**: Imports the `anndata` library, used for handling annotated data matrices, commonly used in single-cell analysis.\n*   **`import scvelo as scv`**: Imports the `scvelo` library, often used for RNA velocity analysis and provides some single-cell datasets.\n\n**2. Data Loading and Preprocessing:**\n\n*   **`ov.plot_set()`**:  Applies default plotting settings from `omicverse`, ensuring consistency in visualizations.\n*   **`bulk_data = ov.read('data/GSE74985_mergedCount.txt.gz', index_col=0)`**: Reads bulk RNA-seq count data from a gzipped text file. The first column of the file is specified as the index (gene names).\n*   **`bulk_data = ov.bulk.Matrix_ID_mapping(bulk_data, 'genesets/pair_GRCm39.tsv')`**: Maps gene IDs in the bulk data to a standard nomenclature (likely mouse gene symbols) using a provided mapping file.\n*   **`bulk_data.head()`**: Displays the first few rows of the processed bulk data, allowing a quick inspection of the data.\n*   **`single_data = scv.datasets.dentategyrus()`**: Loads a pre-processed single-cell RNA-seq dataset of the dentate gyrus from `scvelo`.\n*   **`single_data`**: Prints the loaded single-cell data object, providing a summary of its structure.\n\n**3. Bulk-to-Single Cell Deconvolution Model Initialization:**\n\n*   **`model = ov.bulk2single.Bulk2Single(...)`**: Initializes a `Bulk2Single` model from `omicverse` for deconvoluting bulk RNA-seq data.\n    *   `bulk_data`: Provides the processed bulk RNA-seq data.\n    *   `single_data`: Provides the reference single-cell RNA-seq data.\n    *   `celltype_key='clusters'`: Specifies the column in `single_data`'s annotation that defines cell types.\n    *   `bulk_group=['dg_d_1','dg_d_2','dg_d_3']`:  Specifies which samples in the bulk data correspond to bulk measurements used for training.\n    *   `top_marker_num=200`: Sets the number of top marker genes to be used for each cell type.\n    *   `ratio_num=1`: Determines how many marker genes are selected relative to the total number of genes.\n    *   `gpu=0`: Disables GPU usage (likely running on CPU).\n\n**4. Initial Cell Fraction Prediction and Visualization:**\n\n*   **`CellFractionPrediction = model.predicted_fraction()`**: Predicts cell type fractions in each bulk sample based on marker genes.\n*   **`CellFractionPrediction.head()`**: Displays the first few rows of the predicted cell fraction matrix.\n*   **`ax = CellFractionPrediction.plot(kind='bar', stacked=True, figsize=(8, 4))`**: Generates a stacked bar plot visualizing the cell type fractions for each bulk sample.\n*   **`ax.set_xlabel('Sample')`, `ax.set_ylabel('Cell Fraction')`, `ax.set_title('TAPE Cell fraction predicted')`**: Sets plot labels and titles for clarity.\n*   **`plt.legend(bbox_to_anchor=(1.05, 1), ncol=1)`**: Displays the legend outside of the plot area to avoid overlap with bars.\n*   **`plt.show()`**: Shows the generated plot.\n\n**5. VAE Model Training:**\n\n*   **`model.bulk_preprocess_lazy()` & `model.single_preprocess_lazy()`**:  Preprocesses both bulk and single-cell data lazily (likely using a mechanism that avoids excessive memory use) to prepare for VAE training.\n*  **`model.prepare_input()`**: Prepares the input data for the VAE model.\n*   **`vae_net = model.train(...)`**: Trains a variational autoencoder (VAE) model.\n    *   `batch_size=512`:  Sets the batch size for gradient descent during training.\n    *   `learning_rate=1e-4`:  Sets the learning rate of the optimizer.\n    *   `hidden_size=256`:  Sets the size of the hidden layers in the VAE model.\n    *   `epoch_num=3500`: Sets the number of training iterations (epochs).\n    *   `vae_save_dir='data/bulk2single/save_model'`, `vae_save_name='dg_vae'`:  Specifies where to save the trained model weights.\n    *   `generate_save_dir='data/bulk2single/output'`, `generate_save_name='dg'`:  Specifies the location to save generated single-cell data.\n*   **`model.plot_loss()`**: Plots the loss function curve over the training epochs, a common method to verify model training progress.\n\n**6. VAE Model Loading and Data Generation:**\n\n*   **`vae_net = model.load('data/bulk2single/save_model/dg_vae.pth')`**: Loads a pre-trained VAE model from a specified path, potentially skipping training if a model is already available.\n*   **`generate_adata = model.generate()`**:  Generates pseudo-single-cell expression profiles based on the trained VAE model and bulk data input. This essentially transforms the bulk profiles into a format resembling single-cell data.\n*   **`generate_adata`**: Prints the structure of the generated `anndata` object.\n\n**7. Data Filtering and Visualization of Generated and Original Data:**\n\n*   **`generate_adata = model.filtered(generate_adata, leiden_size=25)`**: Filters the generated data, keeping only cell clusters identified with leiden clustering that have a size of at least 25 cells.\n*   **`generate_adata`**: Prints the structure of the filtered data.\n*   **`ov.bulk2single.bulk2single_plot_cellprop(generate_adata, celltype_key='clusters')`**: Creates a plot of the cell type proportions for the filtered generated data.\n*   **`plt.grid(False)`**: Removes grid lines from the plot.\n*   **`ov.bulk2single.bulk2single_plot_cellprop(single_data, celltype_key='clusters')`**: Creates a plot of the cell type proportions for the original single-cell data.\n*   **`plt.grid(False)`**: Removes grid lines from the plot.\n*   **`ov.bulk2single.bulk2single_plot_correlation(single_data, generate_adata, celltype_key='clusters')`**: Creates a scatter plot to compare cell type proportions between the original and generated single-cell data.\n*   **`plt.grid(False)`**: Removes grid lines from the plot.\n\n**8. Dimensionality Reduction and Embedding Visualization:**\n\n*   **`generate_adata.obsm[\"X_mde\"] = ov.utils.mde(generate_adata.obsm[\"X_pca\"])`**: Computes an MDE (Manifold Dimensionality Embedding) from the PCA (Principal Component Analysis) coordinates of the generated data. MDE is a dimensionality reduction technique often used to visualize single-cell data.\n*   **`ov.utils.embedding(...)`**:  Generates and visualizes an embedding plot of the generated data using the calculated MDE.\n    *   `basis='X_mde'`: Specifies the MDE coordinates for embedding.\n    *   `color=['clusters']`: Colors cells in the plot by cluster identity.\n    *   `wspace=0.4`: Sets horizontal spacing between subplots.\n    *   `palette=ov.utils.pyomic_palette()`: Uses a color palette defined in `omicverse`.\n    *   `frameon='small'`: Reduces the frame size.\n\n**In summary, this script performs the following workflow:**\n\n1.  **Loads and Preprocesses Data:** Reads bulk RNA-seq data and single-cell RNA-seq data, performs gene ID mapping for the bulk data.\n2.  **Initial Cell Fraction Prediction:**  Predicts cell fractions in bulk data using marker genes.\n3.  **Trains a VAE Model:** Uses the bulk and single-cell data to train a VAE model for data generation.\n4.  **Generates Pseudo Single-Cell Data:**  Uses the trained VAE model to generate single-cell data from the bulk data.\n5.  **Filters and Visualizes Generated Data:** Filters generated data based on cell cluster size, and visualizes proportions of cell type.\n6.  **Compares Original and Generated Data:** Compares the cell type proportions between original and generated single-cell data and provides visualization using a correlation plot.\n7.  **Performs Dimensionality Reduction:** Performs MDE and visualize it with colored by cluster information.\n\nThis script aims to computationally deconvolute bulk RNA-seq data into single-cell-like profiles, which allows for further analysis and interpretation of cellular heterogeneity present within the bulk samples. It combines the power of omicverse's bulk2single module, VAE models for representation learning, and established single-cell analysis techniques.",
  "file": "t_bulk2single_annotated.py"
}