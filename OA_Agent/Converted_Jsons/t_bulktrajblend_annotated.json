{
  "description": "This Python script performs a comprehensive analysis of single-cell RNA sequencing data, incorporating bulk RNA-seq data for trajectory inference and cell type identification. It leverages several libraries, including `omicverse`, `scanpy`, `scvelo`, `numpy`, and `matplotlib`. Here's a breakdown of its functionality and structure:\n\n**1. Setup and Data Loading (Lines 1-14):**\n\n   - **Imports:** Necessary libraries are imported with aliases for easier use (`ov` for `omicverse`, `sc` for `scanpy`, `scv` for `scvelo`, `np` for `numpy`).\n   - **Plot Settings:** `ov.plot_set()` configures plotting styles for `omicverse`.\n   - **Single-Cell Data Loading:** The `scvelo.datasets.dentategyrus()` function loads a single-cell dataset of the dentate gyrus into an AnnData object (`adata`).\n   - **Bulk Data Loading:** `ov.utils.read()` reads a bulk RNA-seq dataset from a file (`GSE74985_mergedCount.txt.gz`).\n   - **Gene ID Mapping:** `ov.bulk.Matrix_ID_mapping()` maps gene IDs in the bulk data to the appropriate reference.\n   - **Data Inspection:** The script displays the `adata` object and the first few rows of the processed `bulk` data.\n\n**2. Bulk-to-Single-Cell Mapping with `BulkTrajBlend` (Lines 16-38):**\n\n   - **`BulkTrajBlend` Initialization:** An instance of the `BulkTrajBlend` class is created (`bulktb`). This class facilitates the mapping of bulk RNA-seq data onto single-cell data. It uses the loaded bulk and single-cell datasets. It also specifies bulk group labels (`dg_d_1`, `dg_d_2`, `dg_d_3`) and the cell type key within the single-cell data ('clusters').\n   - **VAE Configuration:** The Variational Autoencoder (VAE) model within `BulkTrajBlend` is configured using `bulktb.vae_configure()` with 100 target cells.\n   - **VAE Training:** The VAE model is trained using `bulktb.vae_train()`. Training parameters include batch size, learning rate, hidden size, number of epochs, and save directories for the model and generated data.\n   - **VAE Loading:** The script attempts to load a pre-trained VAE model using `bulktb.vae_load()`.\n   - **Data Generation:** The trained VAE is used to generate new single-cell data based on the bulk data using `bulktb.vae_generate()` with a specified `leiden_size`.\n   - **Cell Proportion Plot:** `ov.bulk2single.bulk2single_plot_cellprop()` visualizes the cell proportion after the bulk-to-single-cell mapping.\n\n**3. GNN-Based Trajectory Inference (Lines 40-50):**\n\n   - **GNN Configuration:** The Graph Neural Network (GNN) model within `BulkTrajBlend` is configured using `bulktb.gnn_configure()` with training parameters.\n   - **GNN Training:** The GNN model is trained using `bulktb.gnn_train()`.\n   - **GNN Loading:** The script loads a pre-trained GNN model using `bulktb.gnn_load()`.\n   - **GNN Result Generation:** The trained GNN model is used to generate results using `bulktb.gnn_generate()`.\n   - **MDE Computation:** MDE (Multidimensional Diffusion Embedding) coordinates are computed and stored in the single-cell data (`bulktb.nocd_obj.adata`).\n\n**4. MDE Visualization and Filtering (Lines 50-57):**\n\n   - **MDE Plot:** MDE embeddings are plotted using `sc.pl.embedding()` to visualize the single-cell data, colored by clusters and a factor named 'nocd_n'.\n   - **Filtered MDE Plot:** A second MDE embedding is plotted, filtered to only include cells where `nocd_n` does not contain a hyphen '-', colored by clusters and `nocd_n`.\n\n**5. Cell Interpolation (Lines 59-62):**\n\n   - **Raw Cell Count:** Prints the number of cells in the raw `adata`.\n   - **Cell Interpolation:**  `bulktb.interpolation('OPC')` interpolates cell data based on the 'OPC' (Oligodendrocyte Precursor Cells) cell type.\n   - **Interpolated Cell Count:** Prints the number of cells in the interpolated data.\n\n**6. Preprocessing for Original and Interpolated Data (Lines 64-78):**\n\n   - **Data Preparation:** The script prepares the single-cell data (`adata` and `adata1` - interpolated data) for downstream analysis using a series of steps.\n   - **Raw Data Storage:** The original data is stored in the `.raw` slot of each AnnData object.\n   - **Highly Variable Gene Selection:**  `sc.pp.highly_variable_genes()` identifies highly variable genes in both datasets.\n   - **Subset to Highly Variable Genes:** The datasets are subsetted to include only the identified highly variable genes.\n   - **Data Scaling:**  `sc.pp.scale()` scales the gene expression data in both datasets.\n   - **PCA:** Principal Component Analysis is performed on both datasets using `sc.tl.pca()`.\n\n**7.  MDE Computation for Original and Interpolated Data (Lines 80-81):**\n\n   - **MDE for both data:** MDE coordinates are computed and stored in `adata` and `adata1`.\n\n**8. MDE Visualization (Lines 83-93):**\n\n   - **MDE Plot (Original):** An MDE embedding is plotted for the original single-cell data, colored by clusters.\n   - **MDE Plot (Interpolated):** An MDE embedding is plotted for the interpolated single-cell data, colored by clusters.\n\n**9. Trajectory Analysis with `pyVIA` (Lines 95-105):**\n\n   - **`pyVIA` Initialization (Original):** A `pyVIA` object (`v0`) is created for the original single-cell data. `pyVIA` is a tool to perform trajectory inference.\n   - **`pyVIA` Run (Original):** The `pyVIA` analysis is executed using `v0.run()`.\n   - **`pyVIA` Initialization (Interpolated):** A `pyVIA` object (`v1`) is created for the interpolated single-cell data.\n    - **`pyVIA` Run (Interpolated):** The `pyVIA` analysis is executed using `v1.run()`.\n\n**10. Stream Plots and Pseudo Time (Lines 107-126):**\n\n   - **Stream Plot (Original):** A stream plot is generated for the original data using `v0.plot_stream()`, displaying cell trajectories colored by clusters.\n   - **Stream Plot (Interpolated):** A stream plot is generated for the interpolated data using `v1.plot_stream()`, displaying cell trajectories colored by clusters.\n   - **Pseudo Time Stream Plot (Original):** A stream plot is generated for the original data using `v0.plot_stream()`, displaying cell trajectories colored by pseudo time.\n   - **Pseudo Time Stream Plot (Interpolated):** A stream plot is generated for the interpolated data using `v1.plot_stream()`, displaying cell trajectories colored by pseudo time.\n\n**11. PAGA Graph Generation and Visualization (Lines 128-142):**\n\n   - **Pseudo Time Computation (Original):** `v0.get_pseudotime(adata)` computes and stores pseudo time from the pyVIA analysis into `adata`.\n   - **Neighbor Calculation (Original):** The neighbor graph is calculated using `sc.pp.neighbors()`.\n   - **PAGA Calculation (Original):** A PAGA (Partition-based graph abstraction) graph is computed with pseudo time as prior, using `ov.utils.cal_paga()`.\n   - **PAGA Plot (Original):** The generated PAGA graph is displayed using `ov.utils.plot_paga()`.\n    - **Pseudo Time Computation (Interpolated):** `v1.get_pseudotime(adata1)` computes and stores pseudo time from the pyVIA analysis into `adata1`.\n   - **Neighbor Calculation (Interpolated):** The neighbor graph is calculated using `sc.pp.neighbors()`.\n   - **PAGA Calculation (Interpolated):** A PAGA graph is computed with pseudo time as prior, using `ov.utils.cal_paga()`.\n   - **PAGA Plot (Interpolated):** The generated PAGA graph is displayed using `ov.utils.plot_paga()`.\n\n**In Summary:**\n\nThe script performs a complex single-cell RNA sequencing analysis, combining bulk data information with trajectory inference. Key steps involve:\n\n- **Data Loading and Preprocessing:** Loading and preprocessing both single-cell and bulk data.\n- **Bulk-to-Single-Cell Mapping:** Mapping bulk RNA-seq data onto the single-cell space using a VAE, followed by trajectory inference using a GNN.\n- **Data Interpolation:** Interpolating cell data based on a specific cell type, which might represent an intermediate or a missing population in the data.\n- **Trajectory Inference with pyVIA:** Running trajectory inference on original and interpolated datasets using `pyVIA`.\n- **Visualization:** Using MDE embeddings, stream plots, and PAGA graphs to visualize results and cell trajectories.\n- **Pseudo Time:** Computing and visualizing pseudo time for both the raw and interpolated data to infer development progression.\n\nThis script is a comprehensive example of using several bioinformatics tools and libraries to analyze and interpret single-cell RNA sequencing data, integrating bulk data to potentially enhance understanding of developmental or biological processes.",
  "file": "t_bulktrajblend_annotated.py"
}