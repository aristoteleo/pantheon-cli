{
  "description": "This Python script performs differential gene expression (DEG) analysis and gene set enrichment analysis (GSEA) on bulk RNA-seq data, utilizing the `omicverse` library along with `scanpy` and `matplotlib`. Here's a breakdown of its functionality and structure:\n\n**1. Library Imports & Setup (Lines 1-5):**\n\n   - **`import omicverse as ov`**: Imports the `omicverse` library, a toolbox for omics data analysis, aliased as `ov`.\n   - **`import scanpy as sc`**: Imports the `scanpy` library, often used for single-cell data analysis but can be helpful for general data handling, aliased as `sc`.\n   - **`import matplotlib.pyplot as plt`**: Imports the `matplotlib.pyplot` library for generating plots, aliased as `plt`.\n   - **`ov.plot_set()`**: Sets plotting styles using the `omicverse` library. This likely configures default colors, fonts, etc. for consistent visualizations.\n\n**2. Data Loading and Preprocessing (Lines 7-15):**\n\n   - **`ov.utils.download_geneid_annotation_pair()`**: Downloads annotation files to map gene IDs (likely between different ID formats). This file will be later used for ID mapping.\n   - **`data = ov.read('data/counts.txt', index_col=0, header=1)`**: Reads the gene count data from the file `data/counts.txt`. The `index_col=0` parameter makes the first column the index, and `header=1` sets the second row as the header.\n   - **`data.columns = [i.split('/')[-1].replace('.bam','') for i in data.columns]`**: Renames the columns (samples) by extracting the filename from the full path and removing the `.bam` suffix. This assumes the original columns had paths in them such as `data/sample1.bam`.\n   - **`data.head()`**: Displays the first few rows of the data to inspect the loaded counts.\n   - **`data = ov.bulk.Matrix_ID_mapping(data, 'genesets/pair_GRCm39.tsv')`**: Maps the gene IDs in the count data to another type of ID using the `pair_GRCm39.tsv` file.\n   - **`data.head()`**: Displays the head of the data after the ID mapping to see if the mapping was successful.\n\n**3. Differential Gene Expression (DEG) Analysis (Lines 17-48):**\n\n   - **`dds = ov.bulk.pyDEG(data)`**: Creates a `DEG` object, a core element in `omicverse` for carrying out differential expression analysis.\n   - **`dds.drop_duplicates_index()`**: Removes any duplicate gene IDs which can cause problems.\n   - **`dds.normalize()`**: Normalizes the gene expression data, for example by using methods such as TMM, RLE or CPM depending on the settings.\n   - **`treatment_groups = ['4-3', '4-4']`**: Defines the sample names for the treatment group for the differential expression.\n   - **`control_groups = ['1--1', '1--2']`**: Defines the sample names for the control group for the differential expression.\n   - **`result = dds.deg_analysis(treatment_groups, control_groups, method='ttest')`**: Performs DEG analysis using a t-test comparing treatment and control samples, this may vary based on the settings in the DEGs.\n   - **`result.head()`**: Displays the first few rows of the result DataFrame containing the DEG results.\n   - **`print(result.shape)`**: Prints the dimensions of the results.\n   - **`result = result.loc[result['log2(BaseMean)'] > 1]`**: Filters the DEG results, keeping only genes with a base mean greater than 1.\n   - **`print(result.shape)`**: Prints the dimensions of the filtered DEG results.\n   - **`dds.foldchange_set(fc_threshold=-1, pval_threshold=0.05, logp_max=6)`**: Sets thresholds for fold change, p-value, and max log p-value for DEG results filtering. The `fc_threshold` of -1 implies genes that have a log2 fold change less than -1 or larger than 1 would be counted as differentially expressed.\n   - **`dds.plot_volcano(title='DEG Analysis', figsize=(4, 4), plot_genes_num=8, plot_genes_fontsize=12)`**: Creates a volcano plot visualizing the log fold change against the negative log p-value of DEGs, labeling 8 most significant genes.\n   - **`dds.plot_boxplot(genes=['Ckap2', 'Lef1'], treatment_groups=treatment_groups, control_groups=control_groups, figsize=(2, 3), fontsize=12, legend_bbox=(2, 0.55))`**: Generates boxplots showing gene expression levels for genes 'Ckap2' and 'Lef1' in the treatment and control groups.\n   - **`dds.plot_boxplot(genes=['Ckap2'], treatment_groups=treatment_groups, control_groups=control_groups, figsize=(2, 3), fontsize=12, legend_bbox=(2, 0.55))`**: Generates boxplot showing gene expression level for gene 'Ckap2' in the treatment and control groups.\n\n**4. Gene Set Enrichment Analysis (GSEA) (Lines 50-84):**\n\n   - **`ov.utils.download_pathway_database()`**: Downloads the pathway databases from the omicverse.\n   - **`pathway_dict = ov.utils.geneset_prepare('genesets/WikiPathways_2019_Mouse.txt', organism='Mouse')`**: Prepares a pathway dictionary using `omicverse` from a gene set file (in this case, WikiPathways for mouse).\n   - **`deg_genes = dds.result.loc[dds.result['sig'] != 'normal'].index.tolist()`**: Extracts a list of differentially expressed gene names based on the significance results from DEG analysis.\n   - **`enr = ov.bulk.geneset_enrichment(gene_list=deg_genes, pathways_dict=pathway_dict, pvalue_type='auto', organism='mouse')`**: Performs GSEA to check if differentially expressed genes are overrepresented in certain pathways.\n   - **`ov.bulk.geneset_plot(enr, figsize=(2, 5), fig_title='Wiki Pathway enrichment', cax_loc=[2, 0.45, 0.5, 0.02], bbox_to_anchor_used=(-0.25, -13), node_diameter=10, custom_ticks=[5, 7], text_knock=3, cmap='Reds')`**: Creates a plot for the enrichment results for the pathways.\n   - **GO Enrichment analysis:**\n      - These lines (66-84) perform a similar GSEA analysis as the previous steps, but instead of WikiPathways it uses GO (Gene Ontology) terms related to Biological Process (BP), Molecular Function (MF), and Cellular Component (CC) separately.\n   - **`enr_dict = {'BP': enr_go_bp, 'MF': enr_go_mf, 'CC': enr_go_cc}`**: Stores the enrichment results for GO terms in a dictionary.\n   - **`colors_dict = {'BP': ov.pl.red_color[1], 'MF': ov.pl.green_color[1], 'CC': ov.pl.blue_color[1]}`**: Defines color mapping for the GO categories for visualization.\n\n**5. Multi-GSEA Plotting (Lines 91-162):**\n\n   - **`ov.bulk.geneset_plot_multi(enr_dict, colors_dict, num=3, figsize=(2, 5), text_knock=3, fontsize=8, cmap='Reds')`**: Plots multiple GSEA results (from the GO terms) in a single plot for comparison using an `omicverse` function.\n   - **`def geneset_plot_multi(...)`**: Defines a custom function `geneset_plot_multi` to visualize the results of multiple gene set enrichment analyses, utilizing the `PyComplexHeatmap` library for complex plotting. It creates a dot-clustermap of enrichment terms across multiple GO categories, providing detailed annotations, labels, and customizations. This function replaces the previous one by not using the `omicverse` function.\n\n**In Summary:**\n\nThis script takes RNA-seq count data, performs essential preprocessing, identifies differentially expressed genes, and then carries out gene set enrichment analysis using pathway and GO term databases. It generates various plots to aid in the interpretation of the results. This script uses the `omicverse` library as its main framework.\n\n**Key Functionalities:**\n\n*   **Data Loading and Preprocessing:**  Reading count data, renaming columns, mapping gene IDs.\n*   **DEG Analysis:** Identifying differentially expressed genes using t-tests.\n*   **Data Filtering:** Filtering results based on the average expression and significance.\n*   **Visualization:** Generating volcano plots and boxplots for DEGs.\n*   **GSEA:** Determining pathways and GO terms enriched among differentially expressed genes.\n*   **Multi-GSEA visualization:** Generating dot-clustermaps to compare enriched pathways or GO terms across different categories.\n\nThis script effectively leverages the `omicverse` library to streamline complex omics data analysis workflows. The final multi-GSEA visualization is custom-made for a specific use case by using `PyComplexHeatmap` instead of the `omicverse` visualization function.",
  "file": "t_deg_annotated.py"
}