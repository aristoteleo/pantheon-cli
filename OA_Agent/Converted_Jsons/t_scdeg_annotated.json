{
  "description": "This Python script performs a single-cell RNA sequencing (scRNA-seq) analysis workflow using the `omicverse`, `scanpy`, and `scvelo` libraries. It encompasses data loading, preprocessing, quality control, dimensionality reduction, differential expression analysis (both at the cell and meta-cell level), and visualization. Here's a breakdown of its structure and functionality:\n\n**1. Library Imports:**\n\n   - `import omicverse as ov`: Imports the `omicverse` library for scRNA-seq analysis, aliased as `ov`.\n   - `import scanpy as sc`: Imports the `scanpy` library for single-cell analysis, aliased as `sc`.\n   - `import scvelo as scv`: Imports the `scvelo` library for RNA velocity analysis, aliased as `scv`.\n   - `import matplotlib.pyplot as plt`: Imports `matplotlib.pyplot` for creating plots.\n\n**2. Setup and Data Loading:**\n\n   - `ov.utils.ov_plot_set()`: Sets a default plotting style for `omicverse`.\n   - `adata = scv.datasets.pancreas()`: Loads the pancreas dataset from `scvelo` and stores it as an AnnData object (`adata`), which is a common data structure in single-cell analysis.\n   - `adata`: Displays the `adata` object, showing its structure and basic information.\n   - `adata.X.max()`: Calculates the maximum value in the count matrix (`adata.X`), which often represents gene expression levels.\n\n**3. Data Preprocessing and Quality Control:**\n\n   - `adata=ov.pp.qc(...)`: Performs quality control on the `adata` object, filtering cells based on the following thresholds:\n      - `mito_perc`: Percentage of mitochondrial gene counts (set to 5%)\n      - `nUMIs`: Total number of counts per cell (set to 500)\n      - `detected_genes`: Number of genes detected in a cell (set to 250)\n   - `adata=ov.pp.preprocess(...)`: Preprocesses the data with:\n      - `mode='shiftlog|pearson'`: Shift-log normalization followed by Pearson residual calculation.\n      - `n_HVGs=2000`: Selects the top 2000 highly variable genes (HVGs) across the cells.\n   - `adata.raw = adata`: Stores a copy of the preprocessed `adata` object in `adata.raw` for later use.\n   - `adata = adata[:, adata.var.highly_variable_features]`: Filters the `adata` object to keep only the highly variable genes selected earlier.\n   - `ov.pp.scale(adata)`: Scales the expression values of each gene across cells to have zero mean and unit variance.\n\n**4. Dimensionality Reduction:**\n\n   - `ov.pp.pca(adata, layer='scaled', n_pcs=50)`: Performs Principal Component Analysis (PCA) on the scaled data, reducing the dimensionality to 50 principal components.\n   - `adata.X.max()`:  Calculates the maximum value in the PCA reduced matrix.\n\n**5. Differential Expression Analysis (Cell-Level):**\n\n   - `test_adata=adata[adata.obs['clusters'].isin(['Alpha','Beta'])]`: Creates a new `adata` object containing only cells from the 'Alpha' and 'Beta' clusters.\n   - `test_adata`: Displays the `test_adata` object.\n   - `dds=ov.bulk.pyDEG(test_adata.to_df(layer='lognorm').T)`: Performs differential expression analysis using `pyDEG` on the log-normalized expression data of `test_adata`. The `.T` transposes the data so that genes are rows.\n   - `dds.drop_duplicates_index()`: Removes any duplicate gene names in the index of `dds`.\n   -  `print('... drop_duplicates_index success')`: Confirmation message.\n   - `treatment_groups=test_adata.obs[test_adata.obs['clusters']=='Alpha'].index.tolist()`: Creates a list of cell indices that belong to the 'Alpha' cluster, designated as the treatment group.\n   - `control_groups=test_adata.obs[test_adata.obs['clusters']=='Beta'].index.tolist()`: Creates a list of cell indices that belong to the 'Beta' cluster, designated as the control group.\n   - `result=dds.deg_analysis(...)`: Performs a differential expression analysis between the Alpha (treatment) and Beta (control) cells using a t-test.\n   - `result.sort_values('qvalue').head()`: Sorts the results by the q-value (adjusted p-value) and displays the top few rows.\n   - `dds.foldchange_set(...)`: Sets fold-change, p-value, and log p-value thresholds for `dds` object.\n   - `dds.plot_volcano(...)`: Generates a volcano plot of the differential expression results, showing log2 fold change vs -log10(p-value).\n   - `dds.plot_boxplot(...)`: Generates box plots showing the expression levels of genes Irx1 and Adra2a in the Alpha and Beta groups.\n   - `ov.utils.embedding(...)`: Generates a UMAP embedding plot, colored by cluster, as well as the expression of Irx1 and Adra2a genes.\n\n**6. Meta-Cell Analysis (Cell Aggregation):**\n\n   - `meta_obj=ov.single.MetaCell(...)`: Creates a `MetaCell` object which groups similar cells into meta-cells, to reduce noise and improve analysis.\n        - `use_rep='scaled|original|X_pca'`: Specifies the representations to use when generating metacells.\n        - `n_metacells=150`: Specifies the number of metacells to form.\n        - `use_gpu=True`: Specifies whether to use GPU for processing.\n   - `meta_obj.initialize_archetypes()`: Initializes the archetypes for the `MetaCell` object.\n   - `meta_obj.train(min_iter=10, max_iter=50)`: Trains the `MetaCell` object.\n   - `meta_obj.save('seacells/model.pkl')`: Saves the trained `MetaCell` model.\n   - `meta_obj.load('seacells/model.pkl')`: Loads the saved `MetaCell` model.\n   - `ad=meta_obj.predicted(...)`: Predicts cell type labels for meta-cells using a soft assignment method and summarizes to the log normalized layer.\n   - `ad.X.min(),ad.X.max()`: Prints the minimum and maximum values in the cell-type prediction matrix.\n    - `fig, ax = plt.subplots(figsize=(4,4))`: Create matplotlib figure and axes for plotting.\n    -  `ov.utils.embedding(...)`: Generates an UMAP embedding plot, colored by the meta-cell clusters.\n    - `ov.single._metacell.plot_metacells(...)`: Overlays meta-cell boundaries on the embedding plot.\n\n**7. Differential Expression Analysis (Meta-Cell Level):**\n\n   - `test_adata=ad[ad.obs['celltype'].isin(['Alpha','Beta'])]`: Creates a new `adata` object containing only meta-cells with 'Alpha' and 'Beta' labels.\n   - `test_adata`: Displays the `test_adata` object.\n   - `dds_meta=ov.bulk.pyDEG(test_adata.to_df().T)`: Performs differential expression analysis on the meta-cell data.\n   - `dds_meta.drop_duplicates_index()`: Removes any duplicate gene names in the index of `dds_meta`.\n   - `print('... drop_duplicates_index success')`: Confirmation message.\n   - `treatment_groups=test_adata.obs[test_adata.obs['celltype']=='Alpha'].index.tolist()`: Creates a list of meta-cell indices belonging to the 'Alpha' cell type (treatment).\n   - `control_groups=test_adata.obs[test_adata.obs['celltype']=='Beta'].index.tolist()`: Creates a list of meta-cell indices belonging to the 'Beta' cell type (control).\n   - `result=dds_meta.deg_analysis(...)`: Performs a differential expression analysis between the Alpha and Beta meta-cells using a t-test.\n   - `result.sort_values('qvalue').head()`: Sorts the results by the q-value (adjusted p-value) and displays the top few rows.\n   - `dds_meta.foldchange_set(...)`: Sets fold-change, p-value, and log p-value thresholds for `dds_meta` object.\n   - `dds_meta.plot_volcano(...)`: Generates a volcano plot of the meta-cell differential expression results.\n   - `dds_meta.plot_boxplot(...)`: Generates box plots showing the expression levels of genes Ctxn2 and Mnx1 in the Alpha and Beta meta-cell groups.\n   - `ov.utils.embedding(...)`: Generates a UMAP embedding plot, colored by cluster, as well as the expression of Ctxn2 and Mnx1 genes.\n\n**Overall Functionality:**\n\nThis script demonstrates a typical scRNA-seq workflow, starting from raw count data, performing quality control, normalization, dimensionality reduction, and then proceeding to differential expression analysis and visualization at both single-cell and meta-cell levels. It uses various functionalities from the `omicverse`, `scanpy`, and `scvelo` libraries to perform these steps. The meta-cell analysis helps by reducing noise and improving computational efficiency while still retaining cell type-specific information. The differential expression analyses identify genes that are significantly differently expressed between different groups. Finally, the embedding plots visualize the data in a lower-dimensional space and display the expression levels of the significant genes.",
  "file": "t_scdeg_annotated.py"
}